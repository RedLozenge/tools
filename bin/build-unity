#!/bin/bash

BASE_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )"/../.. && pwd )"
BUILD_LOG="build.log"
VERBOSE=""
DEFAULT_ENVIRONMENT="Development"
ENVIRONMENT=""
VALID_ENVIRONMENTS="(Production|Development)"
DEFAULT_TARGET="iOS"
VALID_TARGETS="(iOS|WebPlayer|Android)"
TARGET=""

# Android specific stuff
APK_FILE="habitmonster.apk"
RESIGN_APK_SETTINGS=""

function usage() {
    echo "$0 [-v] [-t ${VALID_TARGETS}] [-e ${VALID_ENVIRONMENTS}]"
    echo
    echo "Options:"
    echo "    -h    how you get this message"
    echo "    -e    set build environment (default = ${DEFAULT_ENVIRONMENT})"
    echo "    -t    set build target (default = ${DEFAULT_TARGET})"
    echo "    -v    be verbose"
}

function err() {
    echo "$@" 1>&2
}

function validate() {
    TEST_STRING="$1"
    VALIDATOR="$2"
    ERR_MESSAGE="$3"

    echo "${TEST_STRING}" | egrep -o "^${VALIDATOR}$" &> /dev/null ; RESULT=$?
    if [ $RESULT -ne 0 ]; then
        err "${ERR_MESSAGE}: ${TEST_STRING}"
        usage
        exit 1
    fi
}

pushd "${BASE_PATH}" &> /dev/null

tools/bin/ensure-unity-is-closed
if [ $? -ne 0 ]; then
    echo "error: unity is still running, aborting build."
    exit 1
fi

while getopts "hve:t:" OPT; do
    case "$OPT" in
        v)
            VERBOSE="true"
            ;;
        e)
            ENVIRONMENT="${OPTARG}"
            ;;
        t)
            TARGET="${OPTARG}"
            ;;
        h)
            usage
            exit 0
            ;;
        \?)
            usage
            exit 1
            ;;
    esac
done

if [ ! -z "${VERBOSE}" ]; then
    set -x
fi

# Set defaults
if [ -z "${ENVIRONMENT}" ]; then
    ENVIRONMENT="${DEFAULT_ENVIRONMENT}"
fi
if [ -z "${TARGET}" ]; then
    TARGET="${DEFAULT_TARGET}"
fi
TARGET_LOWERCASE="`echo -n $TARGET |  tr '[:upper:]' '[:lower:]'`"

# Validate options
validate "${ENVIRONMENT}" "${VALID_ENVIRONMENTS}" "Invalid environment"
validate "${TARGET}" "${VALID_TARGETS}" "Invalid target"

# Remove old build log
rm "${BUILD_LOG}" &> /dev/null || true

# Execute Unity build
echo "building ${TARGET} project from Unity..."
/Applications/Unity/Unity.app/Contents/MacOS/Unity \
    -batchmode \
    -quit \
    -buildTarget ${TARGET_LOWERCASE} \
    -logFile "${BUILD_LOG}" \
    -projectPath "${BASE_PATH}/" \
    -executeMethod "BuildScript.Perform${ENVIRONMENT}${TARGET}Build"

# Check to see if built properly... in a gross way, since Unity doesn't
# believe in error codes.
grep "Completed 'Build.Player." "${BUILD_LOG}" &> /dev/null
UNITY_BUILD_STATUS=$?

if [ ! -z "${VERBOSE}" ]; then
    cat "${BUILD_LOG}"
fi

# Check build status
if [ $UNITY_BUILD_STATUS -ne 0 ]; then
    # Check to see if the build failed because don't have UnityPro, give notice
    # and exit
    grep "requires Unity PRO" "${BUILD_LOG}" &> /dev/null
    if [ $? -eq 0 ]; then
        err "warning: cannot build from the command line because you aren't using Unity Pro."
        err "         continuing anyway."
        exit 0
    fi

    err "error: build failed, see log file '${BUILD_LOG}'"
    exit 1
fi

echo "build succeeded"
exit 0
